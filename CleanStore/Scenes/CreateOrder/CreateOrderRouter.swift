//
//  CreateOrderRouter.swift
//  CleanStore
//
//  Created by Raymond Law on 8/22/15.
//  Copyright (c) 2015 Raymond Law. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol CreateOrderRoutingLogic
{
  func routeToListOrders()
  func routeToShowOrder()
}

protocol CreateOrderDataPassing
{
  var dataStore: CreateOrderDataStore? { get }
}

class CreateOrderRouter: NSObject, RouterProtocol, CreateOrderRoutingLogic, CreateOrderDataPassing
{
  typealias ViewControllerType = CreateOrderViewController
  
  weak var viewController: ViewControllerType?
  var dataStore: CreateOrderDataStore?
  
  // MARK: Routing
  
  func routeToListOrders()
  {
    guard let destinationVC = viewController?.navigationController?.viewControllers.first(where: { $0 is ListOrdersViewController }) as? ListOrdersViewController
        else {
            // List order not in stack so push fresh
            return show(storyboard: .listOrders) { (destinationVC: ListOrdersViewController) in
              var destinationDS = destinationVC.router!.dataStore!
              self.passDataToListOrders(source: self.dataStore!, destination: &destinationDS)
            }
        }
    
    var destinationDS = destinationVC.router!.dataStore!
    passDataToListOrders(source: dataStore!, destination: &destinationDS)
    navigateToListOrders(source: viewController!, destination: destinationVC)
  }
  
  func routeToShowOrder()
  {
    guard let destinationVC = viewController?.navigationController?.viewControllers.first(where: { $0 is ShowOrderViewController }) as? ShowOrderViewController
        else {
            // Show order not in stack so push fresh
            return show(storyboard: .showOrder) { (destinationVC: ShowOrderViewController) in
              var destinationDS = destinationVC.router!.dataStore!
              self.passDataToShowOrder(source: self.dataStore!, destination: &destinationDS)
            }
        }
    
    var destinationDS = destinationVC.router!.dataStore!
    passDataToShowOrder(source: dataStore!, destination: &destinationDS)
    navigateToShowOrder(source: viewController!, destination: destinationVC)
  }
  
  // MARK: Navigation
  
  func navigateToListOrders(source: CreateOrderViewController, destination: ListOrdersViewController)
  {
    source.navigationController?.popToViewController(destination, animated: true)
  }
  
  func navigateToShowOrder(source: CreateOrderViewController, destination: ShowOrderViewController)
  {
    source.navigationController?.popToViewController(destination, animated: true)
  }
  
  // MARK: Passing data
  
  func passDataToListOrders(source: CreateOrderDataStore, destination: inout ListOrdersDataStore)
  {
  }
  
  func passDataToShowOrder(source: CreateOrderDataStore, destination: inout ShowOrderDataStore)
  {
    destination.order = source.orderToEdit
  }
}

extension CreateOrderRouter {
    
    enum StoryboardIdentifier: String {
        case listOrders = "ListOrders"
        case showOrder = "ShowOrder"
    }
}
